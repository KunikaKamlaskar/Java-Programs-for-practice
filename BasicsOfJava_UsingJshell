C:\Users\java -version
openjdk version "17.0.10" 2024-01-16
OpenJDK Runtime Environment OpenLogic-OpenJDK (build 17.0.10+7-adhoc..jdk17u)
OpenJDK 64-Bit Server VM OpenLogic-OpenJDK (build 17.0.10+7-adhoc..jdk17u, mixed mode, sharing)
------------------------------------------------------
C:\Users\java
Usage: java [options] <mainclass> [args...]
           (to execute a class)
   or  java [options] -jar <jarfile> [args...]
           (to execute a jar file)
   or  java [options] -m <module>[/<mainclass>] [args...]
       java [options] --module <module>[/<mainclass>] [args...]
           (to execute the main class in a module)
   or  java [options] <sourcefile> [args]
           (to execute a single source-file program)

 Arguments following the main class, source file, -jar <jarfile>,
 -m or --module <module>/<mainclass> are passed as the arguments to
 main class.

 where options include:

    -cp <class search path of directories and zip/jar files>
    -classpath <class search path of directories and zip/jar files>
    --class-path <class search path of directories and zip/jar files>
                  A ; separated list of directories, JAR archives,
                  and ZIP archives to search for class files.
    -p <module path>
    --module-path <module path>...
                  A ; separated list of directories, each directory
                  is a directory of modules.
    --upgrade-module-path <module path>...
                  A ; separated list of directories, each directory
                  is a directory of modules that replace upgradeable
                  modules in the runtime image
    --add-modules <module name>[,<module name>...]
                  root modules to resolve in addition to the initial module.
                  <module name> can also be ALL-DEFAULT, ALL-SYSTEM,
                  ALL-MODULE-PATH.
    --enable-native-access <module name>[,<module name>...]
                  modules that are permitted to perform restricted native operations.
                  <module name> can also be ALL-UNNAMED.
    --list-modules
                  list observable modules and exit
    -d <module name>
    --describe-module <module name>
                  describe a module and exit
    --dry-run     create VM and load main class but do not execute main method.
                  The --dry-run option may be useful for validating the
                  command-line options such as the module system configuration.
    --validate-modules
                  validate all modules and exit
                  The --validate-modules option may be useful for finding
                  conflicts and other errors with modules on the module path.
    -D<name>=<value>
                  set a system property
    -verbose:[class|module|gc|jni]
                  enable verbose output for the given subsystem
    -version      print product version to the error stream and exit
    --version     print product version to the output stream and exit
    -showversion  print product version to the error stream and continue
    --show-version
                  print product version to the output stream and continue
    --show-module-resolution
                  show module resolution output during startup
    -? -h -help
                  print this help message to the error stream
    --help        print this help message to the output stream
    -X            print help on extra options to the error stream
    --help-extra  print help on extra options to the output stream
    -ea[:<packagename>...|:<classname>]
    -enableassertions[:<packagename>...|:<classname>]
                  enable assertions with specified granularity
    -da[:<packagename>...|:<classname>]
    -disableassertions[:<packagename>...|:<classname>]
                  disable assertions with specified granularity
    -esa | -enablesystemassertions
                  enable system assertions
    -dsa | -disablesystemassertions
                  disable system assertions
    -agentlib:<libname>[=<options>]
                  load native agent library <libname>, e.g. -agentlib:jdwp
                  see also -agentlib:jdwp=help
    -agentpath:<pathname>[=<options>]
                  load native agent library by full pathname
    -javaagent:<jarpath>[=<options>]
                  load Java programming language agent, see java.lang.instrument
    -splash:<imagepath>
                  show splash screen with specified image
                  HiDPI scaled images are automatically supported and used
                  if available. The unscaled image filename, e.g. image.ext,
                  should always be passed as the argument to the -splash option.
                  The most appropriate scaled image provided will be picked up
                  automatically.
                  See the SplashScreen API documentation for more information
    @argument files
                  one or more argument files containing options
    -disable-@files
                  prevent further argument file expansion
    --enable-preview
                  allow classes to depend on preview features of this release
To specify an argument for a long option, you can use --<name>=<value> or
--<name> <value>.
------------------------------------------------------

C:\Users\jshell
|  Welcome to JShell -- Version 17.0.10
|  For an introduction type: /help intro
------------------------------------------------------
jshell> /help intro
|
|                                   intro
|                                   =====
|
|  The jshell tool allows you to execute Java code, getting immediate results.
|  You can enter a Java definition (variable, method, class, etc), like:  int x = 8
|  or a Java expression, like:  x + x
|  or a Java statement or import.
|  These little chunks of Java code are called 'snippets'.
|
|  There are also the jshell tool commands that allow you to understand and
|  control what you are doing, like:  /list
|
|  For a list of commands: /help
------------------------------------------------------
jshell> /help
|  Type a Java language expression, statement, or declaration.
|  Or type one of the following commands:
|  /list [<name or id>|-all|-start]
|       list the source you have typed
|  /edit <name or id>
|       edit a source entry
|  /drop <name or id>
|       delete a source entry
|  /save [-all|-history|-start] <file>
|       Save snippet source to a file
|  /open <file>
|       open a file as source input
|  /vars [<name or id>|-all|-start]
|       list the declared variables and their values
|  /methods [<name or id>|-all|-start]
|       list the declared methods and their signatures
|  /types [<name or id>|-all|-start]
|       list the type declarations
|  /imports
|       list the imported items
|  /exit [<integer-expression-snippet>]
|       exit the jshell tool
|  /env [-class-path <path>] [-module-path <path>] [-add-modules <modules>] ...
|       view or change the evaluation context
|  /reset [-class-path <path>] [-module-path <path>] [-add-modules <modules>]...
|       reset the jshell tool
|  /reload [-restore] [-quiet] [-class-path <path>] [-module-path <path>]...
|       reset and replay relevant history -- current or previous (-restore)
|  /history [-all]
|       history of what you have typed
|  /help [<command>|<subject>]
|       get information about using the jshell tool
|  /set editor|start|feedback|mode|prompt|truncation|format ...
|       set configuration information
|  /? [<command>|<subject>]
|       get information about using the jshell tool
|  /!
|       rerun last snippet -- see /help rerun
|  /<id>
|       rerun snippets by ID or ID range -- see /help rerun
|  /-<n>
|       rerun n-th previous snippet -- see /help rerun
|
|  For more information type '/help' followed by the name of a
|  command or a subject.
|  For example '/help /list' or '/help intro'.
|
|  Subjects:
|
|  intro
|       an introduction to the jshell tool
|  keys
|       a description of readline-like input editing
|  id
|       a description of snippet IDs and how use them
|  shortcuts
|       a description of keystrokes for snippet and command completion,
|       information access, and automatic code generation
|  context
|       a description of the evaluation context options for /env /reload and /reset
|  rerun
|       a description of ways to re-evaluate previously entered snippets
------------------------------------------------------
jshell> /list -all

  s1 : import java.io.*;
  s2 : import java.math.*;
  s3 : import java.net.*;
  s4 : import java.nio.file.*;
  s5 : import java.util.*;
  s6 : import java.util.concurrent.*;
  s7 : import java.util.function.*;
  s8 : import java.util.prefs.*;
  s9 : import java.util.regex.*;
 s10 : import java.util.stream.*;
------------------------------------------------------
jshell> {
   ...>
   ...>
   ...> }
------------------------------------------------------
jshell> /exit
|  Goodbye
------------------------------------------------------
C:\Users\jshell
|  Welcome to JShell -- Version 17.0.10
|  For an introduction type: /help intro

------------------------------------------------------
jshell> System.out.print("Hello world");//for printing
Hello world
------------------------------------------------------
jshell> System.out.print("Hello Team");//for printing
Hello Team
------------------------------------------------------
jshell> System.out.print('Hello Team');//single qoute is for characters so it will show error, and double qoutes are for string
|  Error:
|  unclosed character literal
|  System.out.print('Hello Team');//single qoute is for characters so it will show error, and double qoutes are for string
|                   ^
------------------------------------------------------
jshell> System.out.print("Hello Team");
Hello Team
------------------------------------------------------
jshell> /ex
|  Goodbye
------------------------------------------------------
C:\Users\jshell
|  Welcome to JShell -- Version 17.0.10
|  For an introduction type: /help intro
------------------------------------------------------
jshell> int MyFirstNumber= 5;
MyFirstNumber ==> 5
------------------------------------------------------
jshell> System.out.print(MyFirstNumber);
5
------------------------------------------------------
jshell> int MyFirstNumber= 5000;
MyFirstNumber ==> 5000
------------------------------------------------------
jshell> System.out.print(MyFirstNumber);
5000
------------------------------------------------------
jshell> /list

   2 : System.out.print(MyFirstNumber);
   3 : int MyFirstNumber= 5000;
   4 : System.out.print(MyFirstNumber);
------------------------------------------------------
jshell> MyFirstNumber= 10+5-19;
MyFirstNumber ==> -4

jshell> int SecondNum=15;
SecondNum ==> 15


jshell> int ThirdNum= 507;
ThirdNum ==> 507

jshell> /var
|    int MyFirstNumber = -4
|    int SecondNum = 15
|    int ThirdNum = 507
------------------------------------------------


jshell> int total= MyFirstNumber+SecondNum+ThirdNum;
total ==> 518
--------------------------------------------
Primitive Data Types:
byte           Short           Int           Long
Float           Double
Char
Boolean
-----------------------------
How to find Minimum and maximum limit on Integer:
jshell> int myminINTValue= Integer.MIN_VALUE;
myminINTValue ==> -2147483648

jshell> int mymaxINTValue= Integer.MAX_VALUE;
mymaxINTValue ==> 2147483647
--------------------------------
jshell> System.out.print("Minimum integer value is "+myminINTValue);
Minimum integer value is -2147483648
----------------------------------
Wrapper classes for Primitive data type
Primitive type Wrapper class
int            Integer
char           Character
boolean        Boolean
float          Float
------------------------
Operator, Operand, Expression

int total= 10 +7;
here,
Operator is +,=
Operand is 10,7
Expression is 10+7
----------------------








